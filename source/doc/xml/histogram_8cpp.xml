<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="histogram_8cpp" kind="file">
    <compoundname>histogram.cpp</compoundname>
    <includes refid="histogram_8h" local="yes">mcpele/histogram.h</includes>
    <incdepgraph>
      <node id="50">
        <label>list</label>
      </node>
      <node id="52">
        <label>limits</label>
      </node>
      <node id="48">
        <label>cmath</label>
      </node>
      <node id="46">
        <label>histogram.cpp</label>
        <link refid="histogram.cpp"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>pele/array.h</label>
      </node>
      <node id="47">
        <label>mcpele/histogram.h</label>
        <link refid="histogram_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemcpele">mcpele</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="histogram_8h" kindref="compound">mcpele/histogram.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mcpele{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="classmcpele_1_1Histogram_1a527370a55aa12f1a36390865f144ab76" refkind="member"><highlight class="normal"><ref refid="classmcpele_1_1Histogram_1a527370a55aa12f1a36390865f144ab76" kindref="member">Histogram::Histogram</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_max(floor((max<sp/>/<sp/>bin)<sp/>+<sp/>1)<sp/>*<sp/>bin),</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_min(floor((min<sp/>/<sp/>bin))<sp/>*<sp/>bin),</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_bin(bin),</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_eps(std::numeric_limits&lt;double&gt;::epsilon()),</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_N((m_max<sp/>-<sp/>m_min)<sp/>/<sp/>bin),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_hist(m_N,<sp/>0),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_niter(0)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;histogram<sp/>is<sp/>of<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_N<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classmcpele_1_1Histogram_1a2ff51dc04284a0371187d04f808c3c27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmcpele_1_1Histogram_1a2ff51dc04284a0371187d04f808c3c27" kindref="member">Histogram::add_entry</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_moments(E);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>E<sp/>=<sp/>E<sp/>+<sp/>m_eps;<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>a<sp/>dirty<sp/>hack,<sp/>not<sp/>entirely<sp/>sure<sp/>of<sp/>its<sp/>generality<sp/>and<sp/>possible<sp/>consequences,<sp/>tests<sp/>seem<sp/>to<sp/>be<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>floor((E<sp/>-<sp/>m_min)<sp/>/<sp/>m_bin);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>m_N<sp/>&amp;&amp;<sp/>i<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hist[i]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_niter;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmcpele_1_1Histogram_1a20ef56d27ca0364d32b6cabfaef4b6c1" kindref="member">resize</ref>(E,<sp/>i);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*THIS<sp/>IS<sp/>A<sp/>TEST*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>renorm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>for(vector&lt;size_t&gt;::iterator<sp/>it<sp/>=<sp/>_hist.begin();it<sp/>!=<sp/>_hist.end();++it)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renorm<sp/>+=<sp/>*it;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(renorm<sp/>!=<sp/>_niter)</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>E<sp/>&quot;&lt;&lt;E&lt;&lt;&quot;\n<sp/>niter<sp/>&quot;&lt;&lt;_niter&lt;&lt;&quot;\n<sp/>renorm<sp/>&quot;&lt;&lt;renorm&lt;&lt;&quot;\n<sp/>min<sp/>&quot;&lt;&lt;_min&lt;&lt;&quot;\n<sp/>max<sp/>&quot;&lt;&lt;_max&lt;&lt;&quot;\n<sp/>i<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;\n<sp/>N<sp/>&quot;&lt;&lt;_N&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(renorm<sp/>==<sp/>_niter);</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classmcpele_1_1Histogram_1a20ef56d27ca0364d32b6cabfaef4b6c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmcpele_1_1Histogram_1a20ef56d27ca0364d32b6cabfaef4b6c1" kindref="member">Histogram::resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlen;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>m_N)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlen<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>-<sp/>m_N;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hist.insert(m_hist.end(),<sp/>(newlen<sp/>-<sp/>1),<sp/>0);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hist.push_back(1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_niter;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_max<sp/>=<sp/>floor((E<sp/>/<sp/>m_bin)<sp/>+<sp/>1)<sp/>*<sp/>m_bin;<sp/></highlight><highlight class="comment">//round<sp/>to<sp/>nearest<sp/>increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_N<sp/>=<sp/>round((m_max<sp/>-<sp/>m_min)<sp/>/<sp/>m_bin);<sp/></highlight><highlight class="comment">//was<sp/>round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;int&gt;(m_hist.size())<sp/>!=<sp/>m_N)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>E<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>E<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>niter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_niter&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_hist.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>min<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>max<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_max<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>i<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>N<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_N<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(static_cast&lt;int&gt;(m_hist.size())<sp/>==<sp/>m_N);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;resized<sp/>above<sp/>at<sp/>niter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_niter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlen<sp/>=<sp/>-1<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hist.insert(m_hist.begin(),<sp/>(newlen<sp/>-<sp/>1),<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hist.insert(m_hist.begin(),1);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_niter;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_min<sp/>=<sp/>floor((E<sp/>/<sp/>m_bin))<sp/>*<sp/>m_bin;<sp/></highlight><highlight class="comment">//round<sp/>to<sp/>nearest<sp/>increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_N<sp/>=<sp/>round((m_max<sp/>-<sp/>m_min)<sp/>/<sp/>m_bin);<sp/></highlight><highlight class="comment">//was<sp/>round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>m_hist.size()<sp/>!=<sp/>m_N)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>E<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>E<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>niter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_niter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_hist.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>min<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>max<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_max<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>i<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>N<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_N<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(static_cast&lt;int&gt;(m_hist.size())<sp/>==<sp/>m_N);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;resized<sp/>below<sp/>at<sp/>niter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_niter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;histogram<sp/>encountered<sp/>unexpected<sp/>condition&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>E<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>E<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>niter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_niter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>min<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>max<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_max<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>i<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>N<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_N<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>Note:<sp/>This<sp/>gives<sp/>the<sp/>error<sp/>bar<sp/>on<sp/>a<sp/>bin<sp/>of<sp/>width<sp/>_bin,<sp/>under<sp/>the<sp/>assumption<sp/>that<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>bin<sp/>areas<sp/>is<sp/>1.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classmcpele_1_1Histogram_1a12553273f14fde64d977acdd468c0f19" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="classmcpele_1_1Histogram_1a12553273f14fde64d977acdd468c0f19" kindref="member">Histogram::get_vecdata_error</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="87"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>result(m_hist.size(),<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>this_fraction<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_hist.at(i))<sp/>/<sp/>static_cast&lt;double&gt;(<ref refid="classmcpele_1_1Histogram_1adacd3cc3fc6a0f9a09035d796f436cc6" kindref="member">entries</ref>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.at(i)<sp/>=<sp/>sqrt(this_fraction<sp/>*<sp/>(1<sp/>-<sp/>this_fraction)<sp/>/<sp/>m_bin)<sp/>/<sp/>sqrt(<ref refid="classmcpele_1_1Histogram_1adacd3cc3fc6a0f9a09035d796f436cc6" kindref="member">entries</ref>());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classmcpele_1_1Histogram_1afa079be2c29686204d84badb5afe40af" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="classmcpele_1_1Histogram_1afa079be2c29686204d84badb5afe40af" kindref="member">Histogram::get_vecdata_normalized</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="97"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>result(m_hist.size(),<sp/>0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_hist.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>this_fraction<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_hist.at(i))<sp/>/<sp/>static_cast&lt;double&gt;(m_niter);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.at(i)<sp/>=<sp/>this_fraction<sp/>/<sp/>m_bin;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classmcpele_1_1Histogram_1a49853926fd36ebd17fe4d175f7ecb3fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmcpele_1_1Histogram_1a49853926fd36ebd17fe4d175f7ecb3fb" kindref="member">Histogram::print_terminal</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="107"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_hist.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(i<sp/>+<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(m_hist[i]<sp/>*<sp/>10000<sp/>/<sp/>m_niter,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>mcpele</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/sm958/Work/mcpele/source/histogram.cpp"/>
  </compounddef>
</doxygen>
